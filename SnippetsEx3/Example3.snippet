<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>1 - system.identityModel replacement</Title>
      <Shortcut>example3.1</Shortcut>
      <Description>Replace the existing system.identityModel section</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="XML">
        <![CDATA[<system.identityModel>
    <identityConfiguration>
      <!-- Because we are using WS-Trust we do not need to specify this -->
      <audienceUris mode="Never"/>
      <!-- Indicate which certificate is valid when receiving signed tokens -->
      <issuerNameRegistry type="System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <trustedIssuers>
          <add thumbprint="A11E4E14A2851A15740DCE68911902A809A368A0" name="https://soniatest.accesscontrol.windows.net/" />
        </trustedIssuers>
      </issuerNameRegistry>
      <!-- I did not install this certificate into the store (This is BAD) -->
      <certificateValidation certificateValidationMode="None" />

      <!-- Here is a proper example where you can store your cert for validation -->
      <!--<certificateValidation certificateValidationMode="PeerOrChainTrust" />-->
    </identityConfiguration>
  </system.identityModel>]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>2 - serviceBehaviours replacement</Title>
      <Shortcut>example3.2</Shortcut>
      <Description>Replace the existing serviceBehaviours section</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="XML">
        <![CDATA[<serviceBehaviors>
        <behavior>
          <!-- Use the 'WIF' pipeline -->
          <serviceCredentials useIdentityConfiguration="true" />
          <!-- Make sure that the IPrincipal is set -->
          <serviceAuthorization principalPermissionMode="Always" />
          <!-- To avoid disclosing metadata information, set the value below to false before deployment -->
          <serviceMetadata httpGetEnabled="true" />
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
      </serviceBehaviors>]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>3 - bindings replacement</Title>
      <Shortcut>example3.3</Shortcut>
      <Description>Replace the existing bindings section</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="XML">
        <![CDATA[<bindings>
      
      <!-- This binding describes the link between the client and ADFS -->
      <ws2007HttpBinding>
        <binding name="adfsBinding">
          <security mode="TransportWithMessageCredential">
            <transport clientCredentialType="None" proxyCredentialType="None" realm=""/>
            <message clientCredentialType="Windows"
                      establishSecurityContext="false"
                      algorithmSuite="Default"
                      negotiateServiceCredential="false" />
          </security>
        </binding>
      </ws2007HttpBinding>
      
      <ws2007FederationHttpBinding>
        <!-- This binding describes the link between the client and ACS (relies on the first binding) -->
        <binding name="acsBinding">
          <security mode="TransportWithMessageCredential">
            <message establishSecurityContext="false" issuedKeyType="BearerKey" >
              <issuer address="https://sts.planetsoftware.com.au/adfs/services/trust/13/windowsmixed"
                      binding="ws2007HttpBinding"
                      bindingConfiguration="adfsBinding" />
            </message>
          </security>
        </binding>
        
        <!-- This binding describes the link between the client and your service (relies on the second binding) -->
        <binding name="serviceBinding">
          <security mode="TransportWithMessageCredential">
            <message establishSecurityContext="false" issuedKeyType="BearerKey" >
              <issuerMetadata address="https://soniatest.accesscontrol.windows.net/v2/wstrust/mex" />
              <issuer address="https://soniatest.accesscontrol.windows.net/v2/wstrust/13/issuedtoken-bearer" 
                      binding="ws2007FederationHttpBinding" 
                      bindingConfiguration="acsBinding" />
              <claimTypeRequirements>
                <add claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name" isOptional="true" />
              </claimTypeRequirements>
            </message>
          </security>
        </binding>
      </ws2007FederationHttpBinding>
    </bindings>]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>4 - protocol mapping replacement</Title>
      <Shortcut>example3.4</Shortcut>
      <Description>Replace the existing protocalMapping section</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="XML">
        <![CDATA[<protocolMapping>
      <clear />
      <add scheme="https" binding="ws2007FederationHttpBinding" bindingConfiguration="serviceBinding" />
    </protocolMapping>]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>5 - Allow all certificates</Title>
      <Shortcut>example3.5</Shortcut>
      <Description>A code section that allows all certificates to be allowed</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Net</Namespace>
        </Import>
        <Import>
          <Namespace>System.Net.Security</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp">
        <![CDATA[            // Accept any old certificate (https)... DO NOT DO THIS IN PRODUCTION
            // Used for self-signed localhost certificate
            ServicePointManager.ServerCertificateValidationCallback += (sender, certificate, chain, errors) => { return true; };]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>6 - Code Bindings</Title>
      <Shortcut>example3.6</Shortcut>
      <Description>Put in all of our code bindings in</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IdentityModel.Tokens</Namespace>
        </Import>
        <Import>
          <Namespace>System.ServiceModel</Namespace>
        </Import>
        <Import>
          <Namespace>System.ServiceModel.Security</Namespace>
        </Import>
        <Import>
          <Namespace>System.ServiceModel.Security.Tokens</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp">
        <![CDATA[// ADFS Binding
            var adfsBinding = new WS2007HttpBinding(SecurityMode.TransportWithMessageCredential);
            adfsBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
            var adfsMessage = adfsBinding.Security.Message;
            adfsMessage.ClientCredentialType = MessageCredentialType.Windows;
            adfsMessage.EstablishSecurityContext = false;
            adfsMessage.NegotiateServiceCredential = false;

            // ACS Binding
            var acsBinding = new WS2007FederationHttpBinding(WSFederationHttpSecurityMode.TransportWithMessageCredential);
            var acsMessage = acsBinding.Security.Message;
            acsMessage.IssuedKeyType = SecurityKeyType.BearerKey;
            acsMessage.EstablishSecurityContext = false;
            acsMessage.IssuerAddress = new EndpointAddress("https://sts.planetsoftware.com.au/adfs/services/trust/13/windowsmixed");
            acsMessage.IssuerBinding = adfsBinding;
            
            // Service Binding
            var binding = new WS2007FederationHttpBinding(WSFederationHttpSecurityMode.TransportWithMessageCredential);
            var message = binding.Security.Message;
            message.IssuedKeyType = SecurityKeyType.BearerKey;
            message.EstablishSecurityContext = false;
            message.IssuerMetadataAddress = new EndpointAddress("https://soniatest.accesscontrol.windows.net/v2/wstrust/mex");
            message.IssuerAddress = new EndpointAddress("https://soniatest.accesscontrol.windows.net/v2/wstrust/13/issuedtoken-bearer");
            message.IssuerBinding = acsBinding;
            message.ClaimTypeRequirements.Add(new ClaimTypeRequirement("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name", true));]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>7 - Setup the factory</Title>
      <Shortcut>example3.7</Shortcut>
      <Description>Setup the factory etc</Description>
      <Author>Felix Jorkowski</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="CSharp">
        <![CDATA[// Create the factory to local service
            var factory = new ChannelFactory<IUserService>(binding, "https://localhost:446/Demo3End/UserService.svc");

            factory.Credentials.Windows.ClientCredential = CredentialCache.DefaultNetworkCredentials;

            var service = factory.CreateChannel();
            var serverUserName = service.GetCurrentUserName();

            factory.Close();

            return serverUserName;]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>